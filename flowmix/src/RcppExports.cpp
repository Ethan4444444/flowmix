// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// soft_threshC
NumericVector soft_threshC(NumericVector a, double b);
RcppExport SEXP _flowmix_soft_threshC(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_threshC(a, b));
    return rcpp_result_gen;
END_RCPP
}
// wvec_updateC
NumericVector wvec_updateC(NumericVector b1, NumericVector uw, double lambda, double rho);
RcppExport SEXP _flowmix_wvec_updateC(SEXP b1SEXP, SEXP uwSEXP, SEXP lambdaSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uw(uwSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(wvec_updateC(b1, uw, lambda, rho));
    return rcpp_result_gen;
END_RCPP
}
// rowSumsC
NumericVector rowSumsC(NumericMatrix x);
RcppExport SEXP _flowmix_rowSumsC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSumsC(x));
    return rcpp_result_gen;
END_RCPP
}
// rowSumsC_arma
NumericVector rowSumsC_arma(arma::mat& x);
RcppExport SEXP _flowmix_rowSumsC_arma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSumsC_arma(x));
    return rcpp_result_gen;
END_RCPP
}
// projCmatC
arma::mat projCmatC(arma::mat mat, double C);
RcppExport SEXP _flowmix_projCmatC(SEXP matSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(projCmatC(mat, C));
    return rcpp_result_gen;
END_RCPP
}
// Z_updateC
arma::mat Z_updateC(arma::mat Xbeta1, arma::mat Uz, double C, double rho, int dimdat, int TT);
RcppExport SEXP _flowmix_Z_updateC(SEXP Xbeta1SEXP, SEXP UzSEXP, SEXP CSEXP, SEXP rhoSEXP, SEXP dimdatSEXP, SEXP TTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xbeta1(Xbeta1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Uz(UzSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type dimdat(dimdatSEXP);
    Rcpp::traits::input_parameter< int >::type TT(TTSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_updateC(Xbeta1, Uz, C, rho, dimdat, TT));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flowmix_soft_threshC", (DL_FUNC) &_flowmix_soft_threshC, 2},
    {"_flowmix_wvec_updateC", (DL_FUNC) &_flowmix_wvec_updateC, 4},
    {"_flowmix_rowSumsC", (DL_FUNC) &_flowmix_rowSumsC, 1},
    {"_flowmix_rowSumsC_arma", (DL_FUNC) &_flowmix_rowSumsC_arma, 1},
    {"_flowmix_projCmatC", (DL_FUNC) &_flowmix_projCmatC, 2},
    {"_flowmix_Z_updateC", (DL_FUNC) &_flowmix_Z_updateC, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_flowmix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
