% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mstep-solvers.R
\name{solve_multinom}
\alias{solve_multinom}
\title{Solves the l1-penalized multinom problem using \code{glmnet} (not assuming
that $y$ have row sums of 1):}
\usage{
solve_multinom(y, X, lambda, lambda_max = 10)
}
\arguments{
\item{y}{response (TT by numclust).}

\item{X}{Covariates (TT by p).}

\item{lambda}{regularization parameter for l1 penalization.}

\item{lambda_max}{Default is \code{10}. Internally, \code{solve_multinom()}
uses glmnet on a logarithmically spaced decreasing sequence of lambda
values, whose last entry is \code{lambda}.}
}
\value{
A (p+1) by (numclust) matrix.
}
\description{
\deqn{\frac{1}{n} \sum_{i=1}^n \sum_{k=1}^K y_{ik} ( \alpha_{0k} +
\alpha_k^T X^{(t)}) - \log \left( \sum_{l=1}^K y_{ik} \exp ( \alpha_{0l} +
\alpha_l^T X^{(t)}) \right) - \lambda \sum_{l=1}^K \left(\| \alpha_l \|_1
\right)}
}
\details{
Note, this should have exactly the same output as \code{cvxr_multinom()}
(using \code{cbind(1, X)} instead of \code{X}, and
\code{exclude.from.penalty=1}); \code{cvxr_multinom()} is intended as a
fall-back strategy for when glmnet fails, and as an internal tester.
}
